# Protocol Constants

CMD_FIELD_LENGTH = 16	# Exact length of cmd field (in bytes)
LENGTH_FIELD_LENGTH = 4   # Exact length of length field (in bytes)
MAX_DATA_LENGTH = 10**LENGTH_FIELD_LENGTH-1  # Max size of data field according to protocol
MSG_HEADER_LENGTH = CMD_FIELD_LENGTH + 1 + LENGTH_FIELD_LENGTH + 1  # Exact size of header (CMD+LENGTH fields)
MAX_MSG_LENGTH = MSG_HEADER_LENGTH + MAX_DATA_LENGTH  # Max size of total message
DELIMITER = "|"  # Delimiter character in protocol
DATA_DELIMITER = "#"  # Delimiter in the data part of the message

# Protocol Messages 
# In this dictionary we will have all the client and server command names

PROTOCOL_CLIENT = {
"login_msg" : "LOGIN",
"logout_msg" : "LOGOUT"
} # .. Add more commands if needed


PROTOCOL_SERVER = {
"login_ok_msg" : "LOGIN_OK",
"login_failed_msg" : "ERROR"
} # ..  Add more commands if needed


# Other constants

ERROR_RETURN = None  # What is returned in case of an error


def build_message(cmd, data):
	LENGTH = 16

	strA = ""
	strA = cmd
	if (len(strA) > 16):
		return None

	while(len(strA) != LENGTH):
		strA = strA + " "

	strA += '|'

	data=  str(data)
	length_data = len(data)
	if (length_data>9999):
		return None

	length_data = str(length_data).zfill(4)
	strA += length_data + '|'
	strA += data

	return strA



def parse_message(data):


		if (data.count('|') != 2):
			cmd = None
			msg = None
			return cmd, msg
		index1 = data.index(" ") 
		cmd = data[0: index1]

		data = data[21: len(data)]

		index1 = data.index("|")
		msg = data[index1+1: len(data)]
		return cmd, msg


	
def split_data(strA, Camot):
	list = []

	while (Camot != 0):
	    numIndex = strA.find('#')
	    if (numIndex == -1):
	        list.append(strA[0: len(strA)])
	        strA = ""
	        Camot = Camot -1
	    else:
	        list.append(strA[0: numIndex])
	        strA = strA[numIndex+1: len(strA)]
	        Camot = Camot -1

	if (strA.find('#') != -1):
	    list = [None]

	if (list.count("") != 0):
	    list = [None]

	return list




def join_data(list):
	strA = ""
	camot = len(list)
	index =0
	while (camot != 0):
		strA = strA + str(list[index])
		list.remove(list[index])
		if (camot != 1):
		    strA += '#'
		camot = camot -1
	return strA



